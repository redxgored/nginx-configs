### Replace all <site>s in this file with the name of your site.
# Leave for redirecting to https version of the site.
server {
	listen 80;
	listen [::]:80;
	server_name <site>;
	return 301 https://$host$request_uri;
}

server {
	# Listening on port 433 for HTTPS. Change to port 80 for non ssl and remote http2 for non http/2
	listen 443 ssl http2;
	listen [::]:443 ssl http2;

	server_name <site> www.<site>;

	# Leave for ssl
	ssl on;
        ssl_certificate /etc/letsencrypt/live/<site>/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/<site>/privkey.pem;
        ssl_session_timeout 5m;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers on;
	ssl_ciphers EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;
	ssl_dhparam  /etc/nginx/ssl/dhparam.pem;

	# This <site> should be the name of the app you created in gored. Also change /var/www/ with the web root specified in gored-server's config.json
	root /var/www/<site>/app;

	index index.php index.html index.htm index.nginx-debian.html;

	location / {
		try_files $uri $uri/ /index.html;
	}

	error_page 404 /404.html;

	# Set with custom 50x error pages and uncomment.
	#error_page 500 502 503 504 /50x.html;
	#location = /50x.html {
	#	root /usr/share/nginx/www;
	#}

	location ~ \.php$ {
		try_files $uri =404;

		#Replace with location to your php-fpm.sock file. This is based on php7.1 on ubuntu.
		fastcgi_pass unix:/run/php/php7.1-fpm.sock;
		fastcgi_index index.php;
		fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
		include fastcgi_params;
	}
}
